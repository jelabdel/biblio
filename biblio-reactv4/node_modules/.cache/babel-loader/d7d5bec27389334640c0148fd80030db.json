{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, SIGNIN_USER_SUCCESS, SIGNIN_USER_FAILED, LOGOUT_SUCCES, SIGNUP_USER_SUCCESS, SIGNUP_USER_FAILED } from './types'; // Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  }); // Get token from localstorage\n\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  axios.get('http://localhost:3001/user', config).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    console.log('myerr:', res.data);\n    dispatch(returnErrors(err.res.data, err.res.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};","map":{"version":3,"sources":["/Users/jamala/Dropbox/Projects/BIBLIOV4/biblio-reactv4/src/redux/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","SIGNIN_USER_SUCCESS","SIGNIN_USER_FAILED","LOGOUT_SUCCES","SIGNUP_USER_SUCCESS","SIGNUP_USER_FAILED","loadUser","dispatch","getState","type","token","auth","config","headers","get","then","res","payload","data","catch","err","console","log","status"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SACIC,WADJ,EAEIC,YAFJ,EAGIC,UAHJ,EAIIC,mBAJJ,EAKIC,kBALJ,EAMIC,aANJ,EAOIC,mBAPJ,EAQIC,kBARJ,QASO,SATP,C,CAaA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAClD;AACAD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR,CAFkD,CAIlD;;AACA,QAAMW,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B,CALkD,CAOlD;;AACA,QAAME,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CARkD,CAclD;;AACA,MAAIH,KAAJ,EAAW;AACPE,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCH,KAAjC;AACH;;AAEDd,EAAAA,KAAK,CAACkB,GAAN,CAAU,4BAAV,EAAwCF,MAAxC,EACKG,IADL,CACUC,GAAG,IAAIT,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEX,WADY;AAElBmB,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFK,GAAD,CADzB,EAKKC,KALL,CAKWC,GAAG,IAAI;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBN,GAAG,CAACE,IAA1B;AACAX,IAAAA,QAAQ,CAACV,YAAY,CAACuB,GAAG,CAACJ,GAAJ,CAAQE,IAAT,EAAeE,GAAG,CAACJ,GAAJ,CAAQO,MAAvB,CAAb,CAAR;AACAhB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAET;AADD,KAAD,CAAR;AAGH,GAXL;AAYH,CA/BM","sourcesContent":["\nimport axios from 'axios';\nimport { returnErrors } from './errorActions'\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    SIGNIN_USER_SUCCESS,\n    SIGNIN_USER_FAILED,\n    LOGOUT_SUCCES,\n    SIGNUP_USER_SUCCESS,\n    SIGNUP_USER_FAILED\n} from './types';\n\n\n\n// Check token and load user\nexport const loadUser = () => (dispatch, getState) => {\n    // User loading\n    dispatch({ type: USER_LOADING });\n\n    // Get token from localstorage\n    const token = getState().auth.token;\n\n    // Headers\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }\n\n    // If token, add to headers\n    if (token) {\n        config.headers['x-auth-token'] = token;\n    }\n\n    axios.get('http://localhost:3001/user', config)\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        }))\n        .catch(err => {\n            console.log('myerr:', res.data)\n            dispatch(returnErrors(err.res.data, err.res.status));\n            dispatch({\n                type: AUTH_ERROR\n            })\n        })\n}"]},"metadata":{},"sourceType":"module"}