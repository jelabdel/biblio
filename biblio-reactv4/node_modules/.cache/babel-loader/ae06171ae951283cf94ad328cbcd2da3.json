{"ast":null,"code":"import { ADD_BOOK_PENDING, ADD_BOOK_SUCCESS, ADD_BOOK_FAILED, REQUEST_BOOKS_PENDING, REQUEST_BOOKS_SUCCESS, REQUEST_BOOKS_FAILED, LIST_BOOKS } from './types';\nimport axios from 'axios';\nimport { tokenConfig } from './authActions';\nimport { returnErrors } from './errorActions';\nexport const listBooks = (books, language) => {\n  return {\n    type: LIST_BOOKS,\n    books,\n    language\n  };\n};\nexport const addBook = book => (dispatch, getState) => {\n  dispatch({\n    type: ADD_BOOK_PENDING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n    }\n  }; // Request body\n\n  const body = {\n    body: JSON.stringify(book) // body data type must match \"Content-Type\" header\n\n  };\n  axios.post('http://localhost:3001/add', body, config, tokenConfig(getState)) // method: 'POST', // *GET, POST, PUT, DELETE, etc.\n  .then(data => dispatch({\n    type: ADD_BOOK_SUCCESS,\n    payload: data\n  })).catch(err => dispatch(returnErrors(err.response.data, err.response.status)));\n};\nexport const requestBooks = () => (dispatch, getState) => {\n  dispatch({\n    type: REQUEST_BOOKS_PENDING\n  });\n  axios.get('http://localhost:3001', tokenConfig(getState)) // .then(response => response.json())\n  .then(data => dispatch({\n    type: REQUEST_BOOKS_SUCCESS,\n    payload: data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      typee: REQUEST_BOOKS_FAILED\n    });\n  });\n};","map":{"version":3,"sources":["/Users/jamala/Dropbox/Projects/BIBLIOV4/biblio-reactv4/src/redux/actions/libraryActions.js"],"names":["ADD_BOOK_PENDING","ADD_BOOK_SUCCESS","ADD_BOOK_FAILED","REQUEST_BOOKS_PENDING","REQUEST_BOOKS_SUCCESS","REQUEST_BOOKS_FAILED","LIST_BOOKS","axios","tokenConfig","returnErrors","listBooks","books","language","type","addBook","book","dispatch","getState","config","headers","body","JSON","stringify","post","then","data","payload","catch","err","response","status","requestBooks","get","typee"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,gBAFJ,EAGIC,eAHJ,EAIIC,qBAJJ,EAKIC,qBALJ,EAMIC,oBANJ,EAOIC,UAPJ,QAQO,SARP;AASA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC1C,SAAO;AACHC,IAAAA,IAAI,EAAEP,UADH;AAEHK,IAAAA,KAFG;AAGHC,IAAAA;AAHG,GAAP;AAKH,CANM;AASP,OAAO,MAAME,OAAO,GAAIC,IAAD,IAAU,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACrDD,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEb;AAAR,GAAD,CAAR;AACA,QAAMkB,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX,CAEL;;AAFK;AADE,GAAf,CAFqD,CASrD;;AACA,QAAMC,IAAI,GAAG;AACTA,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf,CADG,CACkB;;AADlB,GAAb;AAGAR,EAAAA,KAAK,CAACgB,IAAN,CAAW,2BAAX,EAAwCH,IAAxC,EAA8CF,MAA9C,EAAsDV,WAAW,CAACS,QAAD,CAAjE,EACI;AADJ,GAEKO,IAFL,CAEUC,IAAI,IAAIT,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEZ,gBAAR;AAA0ByB,IAAAA,OAAO,EAAED;AAAnC,GAAD,CAF1B,EAGKE,KAHL,CAGWC,GAAG,IAAIZ,QAAQ,CAACP,YAAY,CAACmB,GAAG,CAACC,QAAJ,CAAaJ,IAAd,EAAoBG,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAH1B;AAKH,CAlBM;AAoBP,OAAO,MAAMC,YAAY,GAAG,MAAM,CAACf,QAAD,EAAWC,QAAX,KAAwB;AACtDD,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;AACAI,EAAAA,KAAK,CAACyB,GAAN,CAAU,uBAAV,EAAmCxB,WAAW,CAACS,QAAD,CAA9C,EACI;AADJ,GAEKO,IAFL,CAEUC,IAAI,IAAIT,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAET,qBAAR;AAA+BsB,IAAAA,OAAO,EAAED;AAAxC,GAAD,CAF1B,EAGKE,KAHL,CAGWC,GAAG,IAAI;AACVZ,IAAAA,QAAQ,CAACP,YAAY,CAACmB,GAAG,CAACC,QAAJ,CAAaJ,IAAd,EAAoBG,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAd,IAAAA,QAAQ,CAAC;AAAEiB,MAAAA,KAAK,EAAE5B;AAAT,KAAD,CAAR;AACH,GANL;AAQH,CAVM","sourcesContent":["import {\n    ADD_BOOK_PENDING,\n    ADD_BOOK_SUCCESS,\n    ADD_BOOK_FAILED,\n    REQUEST_BOOKS_PENDING,\n    REQUEST_BOOKS_SUCCESS,\n    REQUEST_BOOKS_FAILED,\n    LIST_BOOKS\n} from './types';\nimport axios from 'axios';\nimport { tokenConfig } from './authActions';\nimport { returnErrors } from './errorActions';\n\nexport const listBooks = (books, language) => {\n    return {\n        type: LIST_BOOKS,\n        books,\n        language\n    }\n}\n\n\nexport const addBook = (book) => (dispatch, getState) => {\n    dispatch({ type: ADD_BOOK_PENDING })\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n        }\n    }\n\n    // Request body\n    const body = {\n        body: JSON.stringify(book) // body data type must match \"Content-Type\" header\n    }\n    axios.post('http://localhost:3001/add', body, config, tokenConfig(getState))\n        // method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        .then(data => dispatch({ type: ADD_BOOK_SUCCESS, payload: data }))\n        .catch(err => dispatch(returnErrors(err.response.data, err.response.status)))\n\n}\n\nexport const requestBooks = () => (dispatch, getState) => {\n    dispatch({ type: REQUEST_BOOKS_PENDING })\n    axios.get('http://localhost:3001', tokenConfig(getState))\n        // .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_BOOKS_SUCCESS, payload: data }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({ typee: REQUEST_BOOKS_FAILED })\n        })\n\n}"]},"metadata":{},"sourceType":"module"}