{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR // SIGNIN_USER_SUCCESS,\n// SIGNIN_USER_FAILED,\n// LOGOUT_SUCCES,\n// SIGNUP_USER_SUCCESS,\n// SIGNUP_USER_FAILED\n} from './types'; // Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('http://localhost:3001/user', tokenConfig(getState)).then(res => {\n    console.log('res.data in loadUser:', res.data);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\nexport const signUpUser = user => dispatch => {\n  dispatch({\n    type: SIGNUP_USER_PENDING\n  }); // Headers\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request Body\n\n  const body = {\n    body: JSON.stringify(user)\n  };\n  axios.post('http://localhost:3001/signup', body, config).then(res => dispatch({\n    type: SIGNUP_USER_SUCCESS,\n    payload: res.data\n  })).then(payload => console.log('test:', payload)).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: SIGNUP_USER_FAILED\n    });\n  });\n}; //Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from localstorage\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/jamala/Dropbox/Projects/BIBLIOV4/biblio-reactv4/src/redux/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","loadUser","dispatch","getState","type","get","tokenConfig","then","res","console","log","data","payload","catch","err","response","status","signUpUser","user","SIGNUP_USER_PENDING","config","headers","body","JSON","stringify","post","SIGNUP_USER_SUCCESS","SIGNUP_USER_FAILED","token","auth"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SACIC,WADJ,EAEIC,YAFJ,EAGIC,UAHJ,CAII;AACA;AACA;AACA;AACA;AARJ,OASO,SATP,C,CAaA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAElD;AACAD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AAIAH,EAAAA,KAAK,CAACS,GAAN,CAAU,4BAAV,EAAwCC,WAAW,CAACH,QAAD,CAAnD,EACKI,IADL,CACUC,GAAG,IAAI;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,GAAG,CAACG,IAAzC;AACAT,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEN,WADD;AAELc,MAAAA,OAAO,EAAEJ,GAAG,CAACG;AAFR,KAAD,CAAR;AAIH,GAPL,EAQKE,KARL,CAQWC,GAAG,IAAI;AACVZ,IAAAA,QAAQ,CAACL,YAAY,CAACiB,GAAG,CAACC,QAAJ,CAAaJ,IAAd,EAAoBG,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAd,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEJ;AADD,KAAD,CAAR;AAIH,GAdL;AAgBH,CAvBM;AAyBP,OAAO,MAAMiB,UAAU,GAAIC,IAAD,IAAWhB,QAAD,IAAc;AAC9CA,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEe;AAAR,GAAD,CAAR,CAD8C,CAG9C;;AACA,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CAJ8C,CAU9C;;AACA,QAAMC,IAAI,GAAG;AACTA,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AADG,GAAb;AAIAtB,EAAAA,KAAK,CAAC6B,IAAN,CAAW,8BAAX,EAA2CH,IAA3C,EAAiDF,MAAjD,EACKb,IADL,CACUC,GAAG,IAAIN,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEsB,mBADY;AAElBd,IAAAA,OAAO,EAAEJ,GAAG,CAACG;AAFK,GAAD,CADzB,EAKKJ,IALL,CAKUK,OAAO,IAAIH,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,OAArB,CALrB,EAMKC,KANL,CAMWC,GAAG,IAAI;AACVZ,IAAAA,QAAQ,CAACL,YAAY,CAACiB,GAAG,CAACC,QAAJ,CAAaJ,IAAd,EAAoBG,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,eAAzC,CAAb,CAAR;AACAd,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEuB;AADD,KAAD,CAAR;AAGH,GAXL;AAYH,CA3BM,C,CA+BP;;AACA,OAAO,MAAMrB,WAAW,GAAGH,QAAQ,IAAI;AACnC;AACA,QAAMyB,KAAK,GAAGzB,QAAQ,GAAG0B,IAAX,CAAgBD,KAA9B,CAFmC,CAInC;;AACA,QAAMR,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CALmC,CAWnC;;AACA,MAAIO,KAAJ,EAAW;AACPR,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCO,KAAjC;AACH;;AAED,SAAOR,MAAP;AACH,CAjBM","sourcesContent":["\nimport axios from 'axios';\nimport { returnErrors } from './errorActions'\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR\n    // SIGNIN_USER_SUCCESS,\n    // SIGNIN_USER_FAILED,\n    // LOGOUT_SUCCES,\n    // SIGNUP_USER_SUCCESS,\n    // SIGNUP_USER_FAILED\n} from './types';\n\n\n\n// Check token and load user\nexport const loadUser = () => (dispatch, getState) => {\n\n    // User loading\n    dispatch({ type: USER_LOADING });\n\n\n\n    axios.get('http://localhost:3001/user', tokenConfig(getState))\n        .then(res => {\n            console.log('res.data in loadUser:', res.data)\n            dispatch({\n                type: USER_LOADED,\n                payload: res.data\n            })\n        })\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            })\n\n        })\n\n}\n\nexport const signUpUser = (user) => (dispatch) => {\n    dispatch({ type: SIGNUP_USER_PENDING })\n\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    // Request Body\n    const body = {\n        body: JSON.stringify(user)\n    }\n\n    axios.post('http://localhost:3001/signup', body, config)\n        .then(res => dispatch({\n            type: SIGNUP_USER_SUCCESS,\n            payload: res.data\n        }))\n        .then(payload => console.log('test:', payload))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n            dispatch({\n                type: SIGNUP_USER_FAILED\n            });\n        })\n}\n\n\n\n//Setup config/headers and token\nexport const tokenConfig = getState => {\n    // Get token from localstorage\n    const token = getState().auth.token;\n\n    // Headers\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }\n\n    // If token, add to headers\n    if (token) {\n        config.headers['x-auth-token'] = token;\n    }\n\n    return config;\n}"]},"metadata":{},"sourceType":"module"}