{"ast":null,"code":"import * as actionTypes from './constants';\nexport const listBooks = (books, language) => {\n  return {\n    type: actionTypes.LIST_BOOKS,\n    books,\n    language\n  };\n};\nexport const addBook = () => dispatch => {\n  dispatch({\n    type: actionTypes.ADD_BOOK_PENDING,\n    payload: book\n  });\n  fetch('http://localhost:3001/add', {\n    method: 'POST',\n    // *GET, POST, PUT, DELETE, etc.\n    headers: {\n      'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n    },\n    body: JSON.stringify(book) // body data type must match \"Content-Type\" header\n\n  }).then(data => dispatch({\n    type: actionTypes.ADD_BOOKS_SUCCES,\n    payload: data\n  })).catch(error => dispatch({\n    type: actionTypes.ADD_BOOKS_FAILED,\n    payload: error\n  }));\n};\nexport const requestBooks = () => dispatch => {\n  dispatch({\n    type: actionTypes.REQUEST_BOOKS_PENDING\n  });\n  fetch('http://localhost:3001').then(response => response.json()).then(data => dispatch({\n    type: actionTypes.REQUEST_BOOKS_SUCCES,\n    payload: data\n  })).catch(error => dispatch({\n    type: actionTypes.REQUEST_BOOKS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/Users/jamala/Dropbox/Projects/BIBLIOV3/biblio-reactv3/src/redux/actions/libraryActions.js"],"names":["actionTypes","listBooks","books","language","type","LIST_BOOKS","addBook","dispatch","ADD_BOOK_PENDING","payload","book","fetch","method","headers","body","JSON","stringify","then","data","ADD_BOOKS_SUCCES","catch","error","ADD_BOOKS_FAILED","requestBooks","REQUEST_BOOKS_PENDING","response","json","REQUEST_BOOKS_SUCCES","REQUEST_BOOKS_FAILED"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,aAA7B;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC1C,SAAO;AACHC,IAAAA,IAAI,EAAEJ,WAAW,CAACK,UADf;AAEHH,IAAAA,KAFG;AAGHC,IAAAA;AAHG,GAAP;AAKH,CANM;AASP,OAAO,MAAMG,OAAO,GAAG,MAAOC,QAAD,IAAc;AACvCA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,WAAW,CAACQ,gBAApB;AAAsCC,IAAAA,OAAO,EAAEC;AAA/C,GAAD,CAAR;AACAC,EAAAA,KAAK,CAAC,2BAAD,EAA8B;AAC/BC,IAAAA,MAAM,EAAE,MADuB;AACf;AAChBC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX,CAEL;;AAFK,KAFsB;AAO/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAPyB,CAOJ;;AAPI,GAA9B,CAAL,CASKO,IATL,CASUC,IAAI,IAAIX,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,WAAW,CAACmB,gBAApB;AAAsCV,IAAAA,OAAO,EAAES;AAA/C,GAAD,CAT1B,EAUKE,KAVL,CAUWC,KAAK,IAAId,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,WAAW,CAACsB,gBAApB;AAAsCb,IAAAA,OAAO,EAAEY;AAA/C,GAAD,CAV5B;AAYH,CAdM;AAgBP,OAAO,MAAME,YAAY,GAAG,MAAOhB,QAAD,IAAc;AAC5CA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,WAAW,CAACwB;AAApB,GAAD,CAAR;AACAb,EAAAA,KAAK,CAAC,uBAAD,CAAL,CACKM,IADL,CACUQ,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKT,IAFL,CAEUC,IAAI,IAAIX,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,WAAW,CAAC2B,oBAApB;AAA0ClB,IAAAA,OAAO,EAAES;AAAnD,GAAD,CAF1B,EAGKE,KAHL,CAGWC,KAAK,IAAId,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,WAAW,CAAC4B,oBAApB;AAA0CnB,IAAAA,OAAO,EAAEY;AAAnD,GAAD,CAH5B;AAKH,CAPM","sourcesContent":["import * as actionTypes from './constants'\n\nexport const listBooks = (books, language) => {\n    return {\n        type: actionTypes.LIST_BOOKS,\n        books,\n        language\n    }\n}\n\n\nexport const addBook = () => (dispatch) => {\n    dispatch({ type: actionTypes.ADD_BOOK_PENDING, payload: book })\n    fetch('http://localhost:3001/add', {\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        headers: {\n            'Content-Type': 'application/json'\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n\n        body: JSON.stringify(book) // body data type must match \"Content-Type\" header\n    })\n        .then(data => dispatch({ type: actionTypes.ADD_BOOKS_SUCCES, payload: data }))\n        .catch(error => dispatch({ type: actionTypes.ADD_BOOKS_FAILED, payload: error }))\n\n}\n\nexport const requestBooks = () => (dispatch) => {\n    dispatch({ type: actionTypes.REQUEST_BOOKS_PENDING })\n    fetch('http://localhost:3001')\n        .then(response => response.json())\n        .then(data => dispatch({ type: actionTypes.REQUEST_BOOKS_SUCCES, payload: data }))\n        .catch(error => dispatch({ type: actionTypes.REQUEST_BOOKS_FAILED, payload: error }))\n\n}"]},"metadata":{},"sourceType":"module"}